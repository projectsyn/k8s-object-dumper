#!/bin/bash
#
# Export all K8s objects before backup
#
# == Authors
#
# * Manuel Hutter <manuel.hutter@vshn.ch>
#
# == License
#
# Copyright (c) 2017, VSHN AG, info@vshn.ch
# Licensed under "BSD 3-Clause". See LICENSE file.

set -e -u -o pipefail

# sysexit.h
readonly EX_PROTOCOL=76

readonly min_expected_kinds=98

default_output_dir=/data/k8s-backup

if ! kubectl=$(type -p kubectl); then
  echo "K8s client \"kubectl\" not found in PATH" >&2
  exit 1
fi

usage() {
  echo "Usage: $0 [-v] [-d <output-directory>]"
  echo
  echo 'Options:'
  echo ' -v  Verbose output'
  echo " -d  Destination directory (default: ${default_output_dir})"
  echo ' -s  Short delays in case of failures'
}

output_dir="$default_output_dir"
opt_verbose=
opt_fastretries=

while getopts 'hvd:s' opt; do
  case "$opt" in
    h)
      usage
      exit 0
      ;;
    v) opt_verbose=yes ;;
    d) output_dir="$OPTARG" ;;
    s) opt_fastretries=yes ;;
    *)
      usage >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

if [[ "$#" -gt 0 ]]; then
  usage >&2
  exit 1
fi

if [[ ! -d "$output_dir" ]]; then
  mkdir -p "$output_dir"
fi

chmod ${opt_verbose:+--changes} 0700 "$output_dir"

# Remove old files
find "$output_dir" -mindepth 1 -maxdepth 1 -type f -delete

delay_attempt() {
  local attempt="$1"
  local msg="$2"
  local delay

  if [[ -n "$opt_fastretries" ]]; then
    delay=1
  else
    delay=$(( 1 + ( (1 + attempt) ** 5) ))
  fi
  echo "Pausing for ${delay} seconds: ${msg}" >&2
  sleep "$delay" || :
}

run_kubectl() {
  "$kubectl" ${opt_verbose:+--v=10} "$@"
}

#
# Capture output of "oc" command in destination file
#
capture_kubectl() {
  local destfile="$1"; shift
  local attempt
  local status

  for ((attempt=0; ; ++attempt)); do
    if run_kubectl "$@" > "$destfile"; then
      return 0
    else
      status=$?

      if (( attempt > 3 )); then
        return "$status"
      fi

      delay_attempt "$attempt" \
        "kubectl failed with exit status ${status} (arguments: $*)"
    fi
  done

  return 1
}

sanitize_name() {
  sed -e 's#[^-.a-zA-Z0-9_]#-#g'
}

verbose() {
  [[ -n "$opt_verbose" ]]
}

extract_group_versions() {
  local base="$1"

  jq --arg base "$base" \
    '.groups[].versions[].groupVersion | ($base + "/" + .)'
}

extract_versioned_apis() {
  local base="$1"

  jq --arg base "$base" '.versions[] | ($base + "/" + .)'
}

validate_kinds() {
  local -a expected=( $(< /usr/local/share/k8s-object-dumper/must-exist) )
  local missing=()
  for j in "${expected[@]}"; do
    local found=

    for i; do
      if [[ "$i" == "$j" ]]; then
        found=yes
        break
      fi
    done

    if [[ -z "$found" ]]; then
      missing+=( "$j" )
    fi
  done

  if [[ -n "${missing+${missing[*]}}" ]]; then
    echo "Object kind discovery via API did not find the following types: ${missing[*]}" >&2
    return 1
  fi

  return 0
}

#
# Peruse Kubernetes API to gather list of known types
#
object_kinds() {
  # Kubernetes legacy v1 API
  capture_kubectl "${output_dir}/k8s-api.json" get --raw /api

  # Kubernetes APIs
  capture_kubectl "${output_dir}/k8s-apis.json" get --raw /apis

  # Process API groups
  extract_group_versions /apis \
    < "${output_dir}/k8s-apis.json" \
    > "${output_dir}/k8s-apis.groups.json"
  extract_versioned_apis /api \
    < "${output_dir}/k8s-api.json" \
    > "${output_dir}/k8s-api.groups.json"

  # Combine groups
  jq --slurp --raw-output 'sort | unique | @sh' \
    "${output_dir}/k8s-apis.groups.json" \
    "${output_dir}/k8s-api.groups.json" \
    > "${output_dir}/api-groups.txt"

  eval "local -a groups=( $(< "${output_dir}/api-groups.txt") )"

  local -a files=()

  # Get all object types for each group
  for url in "${groups[@]}"; do
    local san_name=$(sanitize_name <<< "${url##/}")
    local name="api-${san_name}.json"
    local fname="${output_dir}/${name}"

    capture_kubectl "$fname" get --raw "$url"

    files+=( "$fname" )
  done

  # Build list of types
  jq --slurp --raw-output 'map(.resources[].name) | sort | unique | @sh' \
    "${files[@]}"
}

#
# Determine whether a type can be retrieved from a cluster
#
#
retrievable_kind() {
  local -a known_to_fail=( $(< /usr/local/share/k8s-object-dumper/known-to-fail) )

  for kind in "${known_to_fail[@]}"
  do
    if [[ "$1" =~ ^${kind}$ ]]; then
      return 1
    fi
  done

  return 0
}

#
# Download objects and parse received JSON structure to determine count
#
# Failures during download or parsing are returned. A small set of errors is
# recognized and leads to $EX_PROTOCOL being returned.
#
fetch_objects() {
  local kind="$1" destfile="$2"
  local objcount=
  local status=1
  local error=

  # Capture stderr
  if error=$(run_kubectl get --all-namespaces --output=json "$kind" 2>&1 >"$destfile" | tee -a /dev/stderr); then
    if objcount=$(jq --raw-output '.items | length' < "$destfile"); then
      echo "Received ${objcount} ${kind} objects" >&2
      return 0
    fi
  else
    status=$?

    local errprefix=

    if verbose; then
      echo "Kubernetes client failed with status ${status}" >&2
      errprefix='[^]]+ *[-_a-z0-9]+\.go:[0-9]+] *'
    fi

    errprefix+='(|Error from server( \([a-zA-Z]+\)|): *|error: *)'

    if egrep -iq \
      -e "^${errprefix}the server does not allow this method on the requested resource\$" \
      -e "^${errprefix}Unable to list \"${kind}\": the server could not find the requested resource\$" \
      -e "^${errprefix}Unable to list {\".*\" \"v1\" \"${kind}\"}: the server could not find the requested resource\$" \
      -e "^${errprefix}Unable to list \".*/v1, Resource=${kind}\": the server could not find the requested resource\$" \
      -e "^${errprefix}the server doesn't have a resource type \"${kind}\"\$" \
      <<< "$error"
    then
      return "$EX_PROTOCOL"
    fi
  fi

  return 1
}

#
# Download all objects of given object kind
#
# In case of failures the download is attempted several times with short
# delays. Recognized errors (EX_PROTOCOL) are returned right away.
#
fetch() {
  local kind="$1" destfile="$2"
  local attempt
  local status

  for ((attempt=0; ; ++attempt)); do
    status=0
    ( fetch_objects "$kind" "$destfile"; ) || status=$?

    if (( status == 0 || status == EX_PROTOCOL )); then
      return "$status"
    fi

    if (( attempt > 3 )); then
      break
    fi

    delay_attempt "$attempt" "Retrieval of ${kind} objects failed"
  done

  echo "Retrieving objects of kind \"${kind}\" failed" >&2

  return 1
}

#
# Split object lists into individual files
#
split_objects() {
  local splitdir="${output_dir}/split"

  if [[ ! -d "$splitdir" ]]; then
    mkdir "$splitdir"
  fi

  # Remove old files
  find "$splitdir" -mindepth 1 -type f -name '*.json' -delete

  echo "Splitting ${#} JSON files" >&2

  if krossa "$splitdir" "$@"; then
    # Remove empty directories
    find "$splitdir" -type d -empty -delete

    return 0
  fi

  return 1
}

#
# Compare against Kubernetes version
#
# Arguments:
# op: jq comparison operator (==, <, <=, >, >=)
# major, minor: Integers
#
check_version() {
  local op="$1" major="$2" minor="$3"

  jq --exit-status \
    --arg major "$major" --arg minor "$minor" \
    "[
      (.major | tonumber),
      # Remove non-numeric suffix
      (.minor | "'sub("\\D+$"; ""; "il")'" | tonumber)
    ] ${op}
    [(\$major | tonumber), (\$minor | tonumber)]" \
    < "${output_dir}/version.json" \
    > /dev/null
}

date > "${output_dir}/timestamp-begin.txt"

capture_kubectl "${output_dir}/version.txt" version

capture_kubectl "${output_dir}/version.json" get --raw /version

if check_version '<' 1 7; then
  echo "Kubernetes 1.7 or newer required" >&2
  exit 1
fi

object_kinds > "${output_dir}/api-kinds.txt"

eval "declare -a kinds=( $(< "${output_dir}/api-kinds.txt") )"

declare -i errors=0

if (( "${#kinds[@]}" < min_expected_kinds )); then
  echo "Expected at least ${min_expected_kinds} resource kinds" >&2
  let ++errors
fi

if ! validate_kinds "${kinds[@]}"; then
  let ++errors
fi

echo "Fetching resources for ${#kinds[@]} distinct kinds: ${kinds[*]}" >&2

declare -i idx=0
declare -a object_files=()

for i in "${kinds[@]}"; do
  prefix="${i} ($((++idx))/${#kinds[@]}): "

  if [[ "$i" == */* ]]; then
    if verbose; then
      echo "${prefix}Skipping subresource" >&2
    fi
    continue
  fi

  echo "${prefix}Downloading" >&2

  if retrievable_kind "$i"; then
    retrievable=yes
  else
    retrievable=
  fi

  san_name=$(sanitize_name <<< "$i")
  destfile="${output_dir}/objects-${san_name}.json"

  if fetch "$i" "$destfile"; then
    status=0
    object_files+=( "$destfile" )
  else
    status=$?
  fi

  if (( status == EX_PROTOCOL )); then
    if [[ -n "$retrievable" ]]; then
      echo "Download failed with status ${status} when resource kind \"${i}\" is expected to be retrievable" >&2
      status=1
    else
      echo "Ignoring error about unretrievable resource kind" >&2
      status=0
    fi
  elif [[ -z "$retrievable" ]]; then
    echo "Download succeeded even though resource kind \"${i}\" isn't expected to be retrievable" >&2
    status=1
  fi

  if (( status != 0 )); then
    let ++errors
  fi

  echo >&2
done

if ! split_objects ${object_files+"${object_files[@]}"}; then
  let ++errors
fi

date > "${output_dir}/timestamp-end.txt"

if (( errors > 0 )); then
  echo "Encountered ${errors} error(s) while backing up data" >&2
  exit 1
fi

echo 'K8s backup finished without errors' >&2

# Output for K8up
( cd "${output_dir}/split" && tar czf ${output_dir}/k8s-objects.tar.gz * )

# dump tar to original stdout
cat "${output_dir}/k8s-objects.tar.gz" >&1

exit 0

# vim: set sw=2 sts=2 et :
